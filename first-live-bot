import pandas as pd
import ta
import ccxt
import time

# OKX API Configuration
API_CREDENTIALS = {
    'apiKey': '544d6587-0a7d-4b73-bb06-0e3656c08a18',
    'secret': '9C2CA165254391E4B4638DE6577288BD',
    'password': '#Dinywa15'
}

class OKXTrader:
    def __init__(self, api_credentials, symbol='DOGE/USDT:USDT', leverage=5):
        self.exchange = ccxt.okx({
            'apiKey': api_credentials['apiKey'],
            'secret': api_credentials['secret'],
            'password': api_credentials['password'],
            'enableRateLimit': True,
            'options': {
                'defaultType': 'swap',
            }
        })
        
        self.exchange.set_sandbox_mode(True)
        self.symbol = symbol
        self.leverage = leverage
        self.min_contract = 0.01  # Minimum contract size
        self.contract_size = 1000  # Base contract size for DOGE
        self.setup_trading_params()

    def setup_trading_params(self):
        try:
            # Set leverage using OKX's specific method
            self.exchange.set_leverage(self.leverage, self.symbol)
            print(f"Leverage set to {self.leverage}x")
        except Exception as e:
            print(f"Error setting up trading parameters: {e}")
            
    def calculate_position_size(self, capital, risk_percentage, stop_loss_pct):
        """Calculate position size based on Basso risk management and contract size"""
        risk_amount = capital * risk_percentage
        position_value = risk_amount / stop_loss_pct
        
        # Calculate contracts with 2 decimal precision
        contracts = round(position_value / (self.contract_size * self.exchange.fetch_ticker(self.symbol)['last']), 2)
        
        # Ensure minimum contract size
        contracts = max(contracts, self.min_contract)
        
        # Convert back to DOGE amount
        return contracts * self.contract_size
    
    def place_order(self, side, size, stop_loss=None, take_profit=None):
        try:
            # Convert size to contracts and format to string with 2 decimal places
            contracts = f"{round(size / self.contract_size, 2):.2f}"
            print(f"Placing order for {contracts} contracts ({size} DOGE)")
            
            order_params = {
                'posSide': 'long' if side == 'buy' else 'short',
                'tdMode': 'isolated'
            }
            
            order = self.exchange.create_order(
                symbol=self.symbol,
                type='market',
                side=side,
                amount=contracts,  # Now passing formatted string
                params=order_params
            )
            
            if stop_loss:
                sl_params = {
                    'posSide': 'long' if side == 'buy' else 'short',
                    'tdMode': 'isolated',
                    'stopLoss': str(stop_loss)  # Format stop loss as string
                }
                self.exchange.create_order(
                    symbol=self.symbol,
                    type='stop',
                    side='sell' if side == 'buy' else 'buy',
                    amount=contracts,
                    params=sl_params
                )
                
            if take_profit:
                tp_params = {
                    'posSide': 'long' if side == 'buy' else 'short',
                    'tdMode': 'isolated',
                    'takeProfit': str(take_profit)  # Format take profit as string
                }
                self.exchange.create_order(
                    symbol=self.symbol,
                    type='limit',
                    side='sell' if side == 'buy' else 'buy',
                    amount=contracts,
                    params=tp_params
                )
                
            return order
        except Exception as e:
            print(f"Error placing order: {e}")
            return None

    def get_market_data(self):
        try:
            ticker = self.exchange.fetch_ticker(self.symbol)
            return ticker
        except Exception as e:
            print(f"Error fetching market data: {e}")
            return None

    def trade(self, risk_percentage=0.01, stop_loss_pct=0.02):
        while True:
            try:
                ticker = self.get_market_data()
                if not ticker:
                    continue

                balance = self.exchange.fetch_balance()
                available_usdt = balance['USDT']['free']
                
                position_size = self.calculate_position_size(
                    capital=available_usdt,
                    risk_percentage=risk_percentage,
                    stop_loss_pct=stop_loss_pct
                )

                current_price = ticker['last']
                print(f"Current {self.symbol} price: {current_price}")
                print(f"Available USDT: {available_usdt}")
                print(f"Position size (in DOGE): {position_size}")
                print(f"Number of contracts: {position_size / self.contract_size}")

                # You can implement your own trading strategy here
                # For example, using simple price movement:
                if ticker['percentage'] > 1:  # If price increased by 1%
                    stop_loss = current_price * (1 - stop_loss_pct)
                    take_profit = current_price * (1 + (stop_loss_pct * 2))
                    order = self.place_order('buy', position_size, stop_loss, take_profit)
                    print(f"Long position opened at {current_price}")
                
                elif ticker['percentage'] < -1:  # If price decreased by 1%
                    stop_loss = current_price * (1 + stop_loss_pct)
                    take_profit = current_price * (1 - (stop_loss_pct * 2))
                    order = self.place_order('sell', position_size, stop_loss, take_profit)
                    print(f"Short position opened at {current_price}")

            except Exception as e:
                print(f"Error in trading loop: {e}")
            
            # Wait before next iteration
            time.sleep(60)

# Initialize and start trading
if __name__ == "__main__":
    trader = OKXTrader(API_CREDENTIALS)
    print("Starting live trading...")
    trader.trade()
