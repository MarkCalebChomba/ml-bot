import ccxt
import time

# OKX API Configuration
API_CREDENTIALS = {
    'apiKey': '544d6587-0a7d-4b73-bb06-0e3656c08a18',
    'secret': '9C2CA165254391E4B4638DE6577288BD',
    'password': '#Dinywa15'
}

class OKXTrader:
    def __init__(self, api_credentials, symbol='DOGE/USDT:USDT', leverage=5):
        self.exchange = ccxt.okx({
            'apiKey': api_credentials['apiKey'],
            'secret': api_credentials['secret'],
            'password': api_credentials['password'],
            'enableRateLimit': True,
            'options': {'defaultType': 'swap'}
        })

        self.symbol = symbol
        self.leverage = leverage
        self.contract_size = 1000  # Base contract size for DOGE
        self.setup_trading_params()

    def setup_trading_params(self):
        try:
            # Set leverage using OKX's specific method
            self.exchange.set_leverage(self.leverage, self.symbol)
            print(f"Leverage set to {self.leverage}x using Cross Margin Mode")
        except Exception as e:
            print(f"Error setting leverage: {e}")

    def get_market_data(self):
        try:
            ticker = self.exchange.fetch_ticker(self.symbol)
            return ticker
        except Exception as e:
            print(f"Error fetching market data: {e}")
            return None

    def get_open_position(self):
        """Fetch open positions to check if there's an existing LONG/SHORT position."""
        try:
            positions = self.exchange.fetch_positions([self.symbol])
            for pos in positions:
                if pos['contracts'] > 0:
                    return pos  # Return the open position
            return None
        except Exception as e:
            print(f"Error fetching open positions: {e}")
            return None

    def close_position(self, position):
        """Close an existing position before opening a new one."""
        if position:
            side_to_close = 'sell' if position['side'] == 'long' else 'buy'
            try:
                print(f"Closing {position['side'].upper()} position...")
                self.exchange.create_order(
                    symbol=self.symbol,
                    type='market',
                    side=side_to_close,
                    amount=position['contracts'],
                    params={'tdMode': 'cross'}
                )
                print(f"Closed {position['side'].upper()} position successfully.")
            except Exception as e:
                print(f"Error closing position: {e}")

    def calculate_position_size(self, capital, risk_percentage, stop_loss_pct):
        """Calculate position size based on Basso risk management."""
        risk_amount = capital * risk_percentage
        position_value = risk_amount / stop_loss_pct
        contracts = round(position_value / (self.contract_size * self.exchange.fetch_ticker(self.symbol)['last']), 2)
        return max(contracts * self.contract_size, 0.01)  # Ensure minimum contract size

    def place_order(self, side, size, stop_loss=None, take_profit=None):
        """Place a trade with a trailing stop loss and take profit."""
        try:
            contracts = round(size / self.contract_size, 2)
            print(f"Placing {side.upper()} order for {contracts} contracts ({size} DOGE)")

            order_params = {
                'posSide': 'long' if side == 'buy' else 'short',
                'tdMode': 'cross'
            }

            order = self.exchange.create_order(
                symbol=self.symbol,
                type='market',
                side=side,
                amount=contracts,
                params=order_params
            )

            # Set stop loss and take profit
            if stop_loss and take_profit:
                sl_params = {
                    'posSide': 'long' if side == 'buy' else 'short',
                    'tdMode': 'cross',
                    'stopLoss': {
                        'triggerPrice': stop_loss,
                        'orderType': 'market'
                    },
                    'takeProfit': {
                        'triggerPrice': take_profit,
                        'orderType': 'market'
                    }
                }
                self.exchange.create_order(
                    symbol=self.symbol,
                    type='conditional',
                    side='sell' if side == 'buy' else 'buy',
                    amount=contracts,
                    params=sl_params
                )

            return order
        except Exception as e:
            print(f"Error placing order: {e}")
            return None

    def trade(self, risk_percentage=0.01, stop_loss_pct=0.02, trailing_pct=0.01):
        """Main trading loop with dynamic trailing SL & TP."""
        while True:
            try:
                ticker = self.get_market_data()
                if not ticker:
                    continue

                balance = self.exchange.fetch_balance()
                available_usdt = balance['USDT']['free']

                position_size = self.calculate_position_size(
                    capital=available_usdt,
                    risk_percentage=risk_percentage,
                    stop_loss_pct=stop_loss_pct
                )

                current_price = ticker['last']
                print(f"Current {self.symbol} price: {current_price}")
                print(f"Available USDT: {available_usdt}")
                print(f"Position size (in DOGE): {position_size}")
                print(f"Number of contracts: {position_size / self.contract_size}")

                open_position = self.get_open_position()

                # Define Stop Loss and Take Profit dynamically
                stop_loss = current_price * (1 - stop_loss_pct) if open_position and open_position['side'] == 'long' else current_price * (1 + stop_loss_pct)
                take_profit = current_price * (1 + (stop_loss_pct * 2)) if open_position and open_position['side'] == 'long' else current_price * (1 - (stop_loss_pct * 2))

                # Trailing Stop Loss setup
                trailing_stop = current_price * (1 - trailing_pct) if open_position and open_position['side'] == 'long' else current_price * (1 + trailing_pct)

                if ticker['percentage'] > 1 and (not open_position or open_position['side'] != 'long'):
                    if open_position:
                        self.close_position(open_position)

                    print(f"Opening LONG position at {current_price}")
                    self.place_order('buy', position_size, stop_loss, take_profit)

                elif ticker['percentage'] < -1 and (not open_position or open_position['side'] != 'short'):
                    if open_position:
                        self.close_position(open_position)

                    print(f"Opening SHORT position at {current_price}")
                    self.place_order('sell', position_size, stop_loss, take_profit)

            except Exception as e:
                print(f"Error in trading loop: {e}")

            time.sleep(60)

# Initialize and start trading
if __name__ == "__main__":
    trader = OKXTrader(API_CREDENTIALS)
    print("Starting live trading with Cross Margin Mode...")
    trader.trade()
